问题描述：
总时间限制: 1000ms 内存限制: 65536kB
描述
我的生日要到了！根据习俗，我需要将一些派分给大家。我有N个不同口味、不同大小的派。有F个朋友会来参加我的派对，每个人会拿到一块派（必须一个派的一块，不能由几个派的小块拼成；可以是一整个派）。

我的朋友们都特别小气，如果有人拿到更大的一块，就会开始抱怨。因此所有人拿到的派是同样大小的（但不需要是同样形状的），虽然这样有些派会被浪费，但总比搞砸整个派对好。当然，我也要给自己留一块，而这一块也要和其他人的同样大小。

请问我们每个人拿到的派最大是多少？每个派都是一个高为1，半径不等的圆柱体。

输入
第一行包含两个正整数N和F，1 ≤ N, F ≤ 10 000，表示派的数量和朋友的数量。
第二行包含N个1到10000之间的整数，表示每个派的半径。
输出
输出每个人能得到的最大的派的体积，精确到小数点后三位。
样例输入
3 3
4 3 3
样例输出
25.133

思路分析：
一开始我也以为这个是贪心算法然后准备放个递归啥的来做，后来发现此题不是想象中的一个一个试。举例子： 3 3 5 分给3人 -> 3 3 3 显而易见，当然
1000 4 4 300  分给4人 -> 300 300 300 300 我们可以看到因为每个人分的东西都是一样的，那么可以直接取一个ans函数专门存储可以满足的人数，那么用二分找到
一个完美的体积，每个派返回一个“可以满足标准量”的派个数，如果ans=人数，那么符合条件。ans>人数，则说明标准体积过小，让体积增大。

所以此题实际上是一个二分
#include <iostream>
#include<cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn=10000+10;
const double pi=3.141592653589;
int n,m;
double a[maxn],maxa;
void solve()
{
    double mid,l=0,r=maxa*maxa*pi*100000;
    int ans=0;
    while(l+0.00001<r)//l+0.00001类型转换，让原本没有小数的l出现double精度
    {
        ans=0;
        mid=(l+r)/2;
        for(int i=0;i<n;i++)
            ans+=int(a[i]/mid);
        if(ans<m) r=mid;
        else l=mid;
    }
    printf("%.3lf\n",l);
}
int main()
{
    cin>>n>>m;//m个人，n个派
    m++;//m包括自己
     maxa=0;
    double t;
    for(int i=0;i<n;i++)
    {
        scanf("%lf",&t);
        a[i]=t*t*pi;
        maxa=max(maxa,a[i]);
    }
    solve();
    return 0;
}


注意：1.solve函数要先出现，因为main函数的一些参数还没定义。2.输出函数和输入函数的%/.3lf要记录清楚不要忘了。 3.algorithm很好用 4
全局变量就不要之后再定义，容易出错。
