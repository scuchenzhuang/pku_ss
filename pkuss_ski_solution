Michael喜欢滑雪百这并不奇怪， 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael想知道载一个区域中最长的滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子
 1  2  3  4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9

一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。
输入
输入的第一行表示区域的行数R和列数C(1 <= R,C <= 100)。下面是R行，每行有C个整数，代表高度h，0<=h<=10000。
输出
输出最长区域的长度。
样例输入
5 5
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
样例输出
25

代码:
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
using namespace std;
int R,C;//R为行数，C为列数
int dp[103][103];//动态规划大小记录数组
int hh[103][103];//高度记录
int dir[4][2]={{1,0},{0,1},{-1,0},{0,-1}};//这个用来记录移动的方向
struct ski
{
    int x;
    int y;
    int h;
    bool operator<(const ski &k) const
    {
        return h<k.h;
    }
}s[10010];//设置一个结构体，将所有滑坡数据单一维度地记录，并且，重载了<的运算符。当遇到一个ski的结构体的数据，就可以比较他们的h
int main()
{
    cin>>R>>C;
    int r=0;//记录有多少个滑坡
    int ans=1;//初始滑坡值为1
    for(int i=1;i<=R;i++)
    {
        for(int j=1;j<=C;j++)
        {
            cin>>hh[i][j];
            dp[i][j]=1;
            s[r].x=i;
            s[r].y=j;
            s[r].h=hh[i][j];
            r++;
        }
    }
    sort(s,s+r);//sort函数，左边为初始位置s默认为首位，右边为终止排序的位置
    for(int i=0;i<=r-1;i++)
    {
        int x=s[i].x;
        int y=s[i].y;
        for(int j=0;j<4;j++)
        {
            int xx=x+dir[j][0];
            int yy=y+dir[j][1];
            if(xx<=R&&xx>=1&&yy<=C&&yy>=1&&hh[x][y]>hh[xx][yy])//1.滑坡的上下左右方向不能超界 2.同时滑坡要高于上下左右的某滑坡，才能滑行
            {
                dp[x][y]=max(dp[x][y],dp[xx][yy]+1);//若滑坡的next stage有更大的dp值，就走next stage；否则，就不滑动走另外的边
                ans=max(ans,dp[x][y]);
                
            }
            
        }
    }
    cout<<ans<<endl;
    return 0;
}
